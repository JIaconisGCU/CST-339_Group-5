package com.gcu.cst339_group5.game;

import java.time.LocalDate;

import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Table;
import org.springframework.data.relational.core.mapping.Column;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import jakarta.validation.constraints.PastOrPresent;

/**
 * Represents a Game entity in the Video Game Library Catalog.
 * <p>
 * This class is mapped to the {@code games} table in the database using
 * Spring Data JDBC annotations. It includes validation annotations to
 * ensure that user input meets requirements for title, developer, publisher,
 * and release date.
 * </p>
 */
@Table("games")
public class Game {

	/** Unique identifier for the game (auto-generated by the database). */
    @Id
    private Long id; // null on create -> INSERT

    /** Title of the game (required, max 100 characters). */
    @NotBlank(message = "Title is required")
    @Size(max = 100, message = "Title must be at most 100 characters")
    private String title;

    /** Developer of the game (required, max 100 characters). */
    @NotBlank(message = "Developer is required")
    @Size(max = 100, message = "Developer must be at most 100 characters")
    private String developer;

    /** Publisher of the game (required, max 100 characters). */
    @NotBlank(message = "Publisher is required")
    @Size(max = 100, message = "Publisher must be at most 100 characters")
    private String publisher;

    /** Release date of the game (must be today or in the past). */
    @PastOrPresent(message = "Release date cannot be in the future")
    @Column("release_date") // maps camelCase -> snake_case
    private LocalDate releaseDate;
    
    /** Optional genre (≤ 50 chars). */
    @Size(max = 50, message = "Genre must be at most 50 characters")
    private String genre;

    /** Optional free-text description. */
    @Size(max = 2000, message = "Description must be at most 2000 characters")
    private String description;

    /** Optional award (≤ 100 chars). */
    @Size(max = 100, message = "Award must be at most 100 characters")
    private String award;

    /** Optional: which user created this record (FK to users.id). */
    @Column("created_by_user_id")
    private Long createdByUserId;

    // getters/setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getTitle() { return title; }
    public void setTitle(String title) { this.title = title; }

    public String getDeveloper() { return developer; }
    public void setDeveloper(String developer) { this.developer = developer; }

    public String getPublisher() { return publisher; }
    public void setPublisher(String publisher) { this.publisher = publisher; }

    public LocalDate getReleaseDate() { return releaseDate; }
    public void setReleaseDate(LocalDate releaseDate) { this.releaseDate = releaseDate; }
    
    public String getGenre() { return genre; }
    public void setGenre(String genre) { this.genre = genre; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public String getAward() { return award; }
    public void setAward(String award) { this.award = award; }

    public Long getCreatedByUserId() { return createdByUserId; }
    public void setCreatedByUserId(Long createdByUserId) { this.createdByUserId = createdByUserId; }
}
